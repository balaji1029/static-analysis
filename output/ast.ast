0 source_file 0 163
1 function_item 0 163
2 fn 0 2
2 identifier 3 7
2 parameters 7 9
3 ( 7 8
3 ) 8 9
2 block 10 163
3 { 10 11
3 let_declaration 16 42
4 let 16 19
4 mutable_specifier 20 23
4 identifier 24 25
4 = 26 27
4 call_expression 28 41
5 scoped_identifier 28 39
6 identifier 28 34
6 :: 34 36
6 identifier 36 39
5 arguments 39 41
6 ( 39 40
6 ) 40 41
4 ; 41 42
3 let_declaration 47 61
4 let 47 50
4 mutable_specifier 51 54
4 identifier 55 56
4 = 57 58
4 integer_literal 59 60
4 ; 60 61
3 expression_statement 66 138
4 while_expression 66 138
5 while 66 71
5 binary_expression 72 78
6 identifier 72 73
6 < 74 75
6 integer_literal 76 78
5 block 79 138
6 { 79 80
6 expression_statement 89 116
7 call_expression 89 115
8 field_expression 89 99
9 identifier 89 90
9 . 90 91
9 field_identifier 91 99
8 arguments 99 115
9 ( 99 100
9 reference_expression 100 114
10 & 100 101
10 call_expression 101 114
11 field_expression 101 112
12 identifier 101 102
12 . 102 103
12 field_identifier 103 112
11 arguments 112 114
12 ( 112 113
12 ) 113 114
9 ) 114 115
7 ; 115 116
6 expression_statement 125 132
7 compound_assignment_expr 125 131
8 identifier 125 126
8 += 127 129
8 integer_literal 130 131
7 ; 131 132
6 } 137 138
3 expression_statement 143 161
4 macro_invocation 143 160
5 identifier 143 150
5 ! 150 151
5 token_tree 151 160
6 ( 151 152
6 string_literal 152 156
7 " 152 153
7 string_content 153 155
7 " 155 156
6 , 156 157
6 identifier 158 159
6 ) 159 160
4 ; 160 161
3 } 162 163
END
