Node kind: source_file
	Node kind: use_declaration
		Node kind: use
		Node kind: scoped_identifier
			Node kind: identifier
			Node kind: ::
			Node kind: identifier
		Node kind: ;
	Node kind: use_declaration
		Node kind: use
		Node kind: scoped_use_list
			Node kind: identifier
			Node kind: ::
			Node kind: use_list
				Node kind: {
				Node kind: identifier
				Node kind: ,
				Node kind: identifier
				Node kind: }
		Node kind: ;
	Node kind: function_item
		Node kind: fn
		Node kind: identifier
		Node kind: parameters
			Node kind: (
			Node kind: parameter
				Node kind: identifier
				Node kind: :
				Node kind: type_identifier
			Node kind: ,
			Node kind: parameter
				Node kind: identifier
				Node kind: :
				Node kind: reference_type
					Node kind: &
					Node kind: primitive_type
			Node kind: ,
			Node kind: parameter
				Node kind: identifier
				Node kind: :
				Node kind: primitive_type
			Node kind: )
		Node kind: block
			Node kind: {
			Node kind: let_declaration
				Node kind: let
				Node kind: identifier
				Node kind: =
				Node kind: call_expression
					Node kind: field_expression
						Node kind: identifier
						Node kind: .
						Node kind: field_identifier
					Node kind: arguments
						Node kind: (
						Node kind: )
				Node kind: ;
			Node kind: let_declaration
				Node kind: let
				Node kind: identifier
				Node kind: =
				Node kind: call_expression
					Node kind: field_expression
						Node kind: identifier
						Node kind: .
						Node kind: field_identifier
					Node kind: arguments
						Node kind: (
						Node kind: )
				Node kind: ;
			Node kind: let_declaration
				Node kind: let
				Node kind: identifier
				Node kind: =
				Node kind: call_expression
					Node kind: field_expression
						Node kind: identifier
						Node kind: .
						Node kind: field_identifier
					Node kind: arguments
						Node kind: (
						Node kind: )
				Node kind: ;
			Node kind: let_declaration
				Node kind: let
				Node kind: identifier
				Node kind: =
				Node kind: reference_expression
					Node kind: &
					Node kind: index_expression
						Node kind: identifier
						Node kind: [
						Node kind: range_expression
							Node kind: identifier
							Node kind: ..
							Node kind: identifier
						Node kind: ]
				Node kind: ;
			Node kind: expression_statement
				Node kind: for_expression
					Node kind: for
					Node kind: _
					Node kind: in
					Node kind: range_expression
						Node kind: integer_literal
						Node kind: ..
						Node kind: identifier
					Node kind: block
						Node kind: {
						Node kind: expression_statement
							Node kind: macro_invocation
								Node kind: identifier
								Node kind: !
								Node kind: token_tree
									Node kind: (
									Node kind: string_literal
										Node kind: "
										Node kind: escape_sequence
										Node kind: "
									Node kind: )
							Node kind: ;
						Node kind: }
			Node kind: expression_statement
				Node kind: macro_invocation
					Node kind: identifier
					Node kind: !
					Node kind: token_tree
						Node kind: (
						Node kind: string_literal
							Node kind: "
							Node kind: string_content
							Node kind: "
						Node kind: ,
						Node kind: identifier
						Node kind: )
				Node kind: ;
			Node kind: line_comment
				Node kind: //
			Node kind: expression_statement
				Node kind: for_expression
					Node kind: for
					Node kind: identifier
					Node kind: in
					Node kind: range_expression
						Node kind: integer_literal
						Node kind: ..
						Node kind: call_expression
							Node kind: field_expression
								Node kind: identifier
								Node kind: .
								Node kind: field_identifier
							Node kind: arguments
								Node kind: (
								Node kind: )
					Node kind: block
						Node kind: {
						Node kind: expression_statement
							Node kind: call_expression
								Node kind: identifier
								Node kind: arguments
									Node kind: (
									Node kind: call_expression
										Node kind: field_expression
											Node kind: call_expression
												Node kind: field_expression
													Node kind: identifier
													Node kind: .
													Node kind: field_identifier
												Node kind: arguments
													Node kind: (
													Node kind: identifier
													Node kind: )
											Node kind: .
											Node kind: field_identifier
										Node kind: arguments
											Node kind: (
											Node kind: )
									Node kind: ,
									Node kind: identifier
									Node kind: ,
									Node kind: binary_expression
										Node kind: identifier
										Node kind: +
										Node kind: integer_literal
									Node kind: )
							Node kind: ;
						Node kind: }
			Node kind: line_comment
				Node kind: //
			Node kind: line_comment
				Node kind: //
			Node kind: line_comment
				Node kind: //
			Node kind: line_comment
				Node kind: //
			Node kind: line_comment
				Node kind: //
			Node kind: line_comment
				Node kind: //
			Node kind: }
	Node kind: function_item
		Node kind: fn
		Node kind: identifier
		Node kind: parameters
			Node kind: (
			Node kind: )
		Node kind: block
			Node kind: {
			Node kind: let_declaration
				Node kind: let
				Node kind: identifier
				Node kind: =
				Node kind: string_literal
					Node kind: "
					Node kind: string_content
					Node kind: "
				Node kind: ;	
			Node kind: let_declaration
				Node kind: let
				Node kind: identifier
				Node kind: =
				Node kind: call_expression
					Node kind: field_expression
						Node kind: call_expression
							Node kind: scoped_identifier
								Node kind: identifier
								Node kind: ::
								Node kind: identifier
							Node kind: arguments
								Node kind: (
								Node kind: identifier
								Node kind: )
						Node kind: .
						Node kind: field_identifier
					Node kind: arguments
						Node kind: (
						Node kind: string_literal
							Node kind: "
							Node kind: string_content
							Node kind: "
						Node kind: )
				Node kind: ;
			Node kind: let_declaration
				Node kind: let
				Node kind: mutable_specifier
				Node kind: identifier
				Node kind: =
				Node kind: call_expression
					Node kind: scoped_identifier
						Node kind: identifier
						Node kind: ::
						Node kind: identifier
					Node kind: arguments
						Node kind: (
						Node kind: )
				Node kind: ;
			Node kind: expression_statement
				Node kind: call_expression
					Node kind: field_expression
						Node kind: call_expression
							Node kind: field_expression
								Node kind: identifier
								Node kind: .
								Node kind: field_identifier
							Node kind: arguments
								Node kind: (
								Node kind: reference_expression
									Node kind: &
									Node kind: call_expression
										Node kind: field_expression
											Node kind: scoped_identifier
												Node kind: identifier
												Node kind: ::
												Node kind: identifier
											Node kind: .
											Node kind: field_identifier
										Node kind: arguments
											Node kind: (
											Node kind: )
								Node kind: )
						Node kind: .
						Node kind: field_identifier
					Node kind: arguments
						Node kind: (
						Node kind: string_literal
							Node kind: "
							Node kind: string_content
							Node kind: "
						Node kind: )
				Node kind: ;
			Node kind: let_declaration
				Node kind: let
				Node kind: identifier
				Node kind: =
				Node kind: call_expression
					Node kind: field_expression
						Node kind: call_expression
							Node kind: field_expression
								Node kind: identifier
								Node kind: .
								Node kind: field_identifier
							Node kind: arguments
								Node kind: (
								Node kind: reference_expression
									Node kind: &
									Node kind: identifier
								Node kind: ,
								Node kind: identifier
								Node kind: )
						Node kind: .
						Node kind: field_identifier
					Node kind: arguments
						Node kind: (
						Node kind: string_literal
							Node kind: "
							Node kind: string_content
							Node kind: "
						Node kind: )
				Node kind: ;
			Node kind: let_declaration
				Node kind: let
				Node kind: identifier
				Node kind: =
				Node kind: call_expression
					Node kind: field_expression
						Node kind: identifier
						Node kind: .
						Node kind: field_identifier
					Node kind: arguments
						Node kind: (
						Node kind: )
				Node kind: ;
			Node kind: expression_statement
				Node kind: call_expression
					Node kind: identifier
					Node kind: arguments
						Node kind: (
						Node kind: identifier
						Node kind: ,
						Node kind: reference_expression
							Node kind: &
							Node kind: identifier
						Node kind: ,
						Node kind: integer_literal
						Node kind: )
				Node kind: ;
			Node kind: }
