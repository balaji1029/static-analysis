digraph G {
  source_file -> trait_item;
  trait_item -> trait;
  trait_item -> type_identifier;
  trait_item -> declaration_list;
  declaration_list -> open;
  declaration_list -> function_signature_item;
  function_signature_item -> fn;
  function_signature_item -> identifier;
  function_signature_item -> parameters;
  parameters -> open;
  parameters -> self_parameter;
  self_parameter -> ref;
  self_parameter -> self;
  parameters -> close;
  function_signature_item -> semicolon;
  declaration_list -> close;
  source_file -> trait_item;
  trait_item -> trait;
  trait_item -> type_identifier;
  trait_item -> declaration_list;
  declaration_list -> open;
  declaration_list -> function_signature_item;
  function_signature_item -> fn;
  function_signature_item -> identifier;
  function_signature_item -> parameters;
  parameters -> open;
  parameters -> self_parameter;
  self_parameter -> ref;
  self_parameter -> self;
  parameters -> close;
  function_signature_item -> semicolon;
  declaration_list -> close;
  source_file -> trait_item;
  trait_item -> trait;
  trait_item -> type_identifier;
  trait_item -> declaration_list;
  declaration_list -> open;
  declaration_list -> function_signature_item;
  function_signature_item -> fn;
  function_signature_item -> identifier;
  function_signature_item -> parameters;
  parameters -> open;
  parameters -> self_parameter;
  self_parameter -> ref;
  self_parameter -> self;
  parameters -> close;
  function_signature_item -> semicolon;
  declaration_list -> close;
  source_file -> line_comment;
  line_comment -> //;
  source_file -> line_comment;
  line_comment -> //;
  source_file -> line_comment;
  line_comment -> //;
  source_file -> line_comment;
  line_comment -> //;
  source_file -> line_comment;
  line_comment -> //;
  source_file -> line_comment;
  line_comment -> //;
  source_file -> line_comment;
  line_comment -> //;
  source_file -> struct_item;
  struct_item -> struct;
  struct_item -> type_identifier;
  struct_item -> field_declaration_list;
  field_declaration_list -> open;
  field_declaration_list -> field_declaration;
  field_declaration -> field_identifier;
  field_declaration -> colon;
  field_declaration -> type_identifier;
  field_declaration_list -> comma;
  field_declaration_list -> close;
  source_file -> impl_item;
  impl_item -> impl;
  impl_item -> type_identifier;
  impl_item -> for;
  impl_item -> type_identifier;
  impl_item -> declaration_list;
  declaration_list -> open;
  declaration_list -> function_item;
  function_item -> fn;
  function_item -> identifier;
  function_item -> parameters;
  parameters -> open;
  parameters -> self_parameter;
  self_parameter -> ref;
  self_parameter -> self;
  parameters -> close;
  function_item -> block;
  block -> open;
  block -> expression_statement;
  expression_statement -> macro_invocation;
  macro_invocation -> identifier;
  macro_invocation -> excl;
  macro_invocation -> token_tree;
  token_tree -> open;
  token_tree -> string_literal;
  string_literal -> ";
  string_literal -> string_content;
  string_literal -> ";
  token_tree -> comma;
  token_tree -> self;
  token_tree -> .;
  token_tree -> identifier;
  token_tree -> close;
  expression_statement -> semicolon;
  block -> close;
  declaration_list -> close;
  source_file -> impl_item;
  impl_item -> impl;
  impl_item -> type_identifier;
  impl_item -> for;
  impl_item -> type_identifier;
  impl_item -> declaration_list;
  declaration_list -> open;
  declaration_list -> function_item;
  function_item -> fn;
  function_item -> identifier;
  function_item -> parameters;
  parameters -> open;
  parameters -> self_parameter;
  self_parameter -> ref;
  self_parameter -> self;
  parameters -> close;
  function_item -> block;
  block -> open;
  block -> expression_statement;
  expression_statement -> macro_invocation;
  macro_invocation -> identifier;
  macro_invocation -> excl;
  macro_invocation -> token_tree;
  token_tree -> open;
  token_tree -> string_literal;
  string_literal -> ";
  string_literal -> string_content;
  string_literal -> ";
  token_tree -> comma;
  token_tree -> self;
  token_tree -> .;
  token_tree -> identifier;
  token_tree -> close;
  expression_statement -> semicolon;
  block -> close;
  declaration_list -> close;
  source_file -> impl_item;
  impl_item -> impl;
  impl_item -> type_identifier;
  impl_item -> for;
  impl_item -> type_identifier;
  impl_item -> declaration_list;
  declaration_list -> open;
  declaration_list -> close;
  source_file -> line_comment;
  line_comment -> //;
  source_file -> struct_item;
  struct_item -> struct;
  struct_item -> type_identifier;
  struct_item -> field_declaration_list;
  field_declaration_list -> open;
  field_declaration_list -> field_declaration;
  field_declaration -> field_identifier;
  field_declaration -> colon;
  field_declaration -> type_identifier;
  field_declaration_list -> comma;
  field_declaration_list -> close;
  source_file -> impl_item;
  impl_item -> impl;
  impl_item -> type_identifier;
  impl_item -> for;
  impl_item -> type_identifier;
  impl_item -> declaration_list;
  declaration_list -> open;
  declaration_list -> function_item;
  function_item -> fn;
  function_item -> identifier;
  function_item -> parameters;
  parameters -> open;
  parameters -> self_parameter;
  self_parameter -> ref;
  self_parameter -> self;
  parameters -> close;
  function_item -> block;
  block -> open;
  block -> expression_statement;
  expression_statement -> macro_invocation;
  macro_invocation -> identifier;
  macro_invocation -> excl;
  macro_invocation -> token_tree;
  token_tree -> open;
  token_tree -> string_literal;
  string_literal -> ";
  string_literal -> string_content;
  string_literal -> ";
  token_tree -> comma;
  token_tree -> self;
  token_tree -> .;
  token_tree -> identifier;
  token_tree -> close;
  expression_statement -> semicolon;
  block -> close;
  declaration_list -> close;
  source_file -> impl_item;
  impl_item -> impl;
  impl_item -> type_identifier;
  impl_item -> for;
  impl_item -> type_identifier;
  impl_item -> declaration_list;
  declaration_list -> open;
  declaration_list -> function_item;
  function_item -> fn;
  function_item -> identifier;
  function_item -> parameters;
  parameters -> open;
  parameters -> self_parameter;
  self_parameter -> ref;
  self_parameter -> self;
  parameters -> close;
  function_item -> block;
  block -> open;
  block -> expression_statement;
  expression_statement -> macro_invocation;
  macro_invocation -> identifier;
  macro_invocation -> excl;
  macro_invocation -> token_tree;
  token_tree -> open;
  token_tree -> string_literal;
  string_literal -> ";
  string_literal -> string_content;
  string_literal -> ";
  token_tree -> comma;
  token_tree -> self;
  token_tree -> .;
  token_tree -> identifier;
  token_tree -> close;
  expression_statement -> semicolon;
  block -> close;
  declaration_list -> close;
  source_file -> impl_item;
  impl_item -> impl;
  impl_item -> type_identifier;
  impl_item -> for;
  impl_item -> type_identifier;
  impl_item -> declaration_list;
  declaration_list -> open;
  declaration_list -> close;
  source_file -> line_comment;
  line_comment -> //;
  source_file -> struct_item;
  struct_item -> struct;
  struct_item -> type_identifier;
  struct_item -> field_declaration_list;
  field_declaration_list -> open;
  field_declaration_list -> field_declaration;
  field_declaration -> field_identifier;
  field_declaration -> colon;
  field_declaration -> type_identifier;
  field_declaration_list -> comma;
  field_declaration_list -> close;
  source_file -> impl_item;
  impl_item -> impl;
  impl_item -> type_identifier;
  impl_item -> for;
  impl_item -> type_identifier;
  impl_item -> declaration_list;
  declaration_list -> open;
  declaration_list -> function_item;
  function_item -> fn;
  function_item -> identifier;
  function_item -> parameters;
  parameters -> open;
  parameters -> self_parameter;
  self_parameter -> ref;
  self_parameter -> self;
  parameters -> close;
  function_item -> block;
  block -> open;
  block -> expression_statement;
  expression_statement -> macro_invocation;
  macro_invocation -> identifier;
  macro_invocation -> excl;
  macro_invocation -> token_tree;
  token_tree -> open;
  token_tree -> string_literal;
  string_literal -> ";
  string_literal -> string_content;
  string_literal -> ";
  token_tree -> comma;
  token_tree -> self;
  token_tree -> .;
  token_tree -> identifier;
  token_tree -> close;
  expression_statement -> semicolon;
  block -> close;
  declaration_list -> close;
  source_file -> impl_item;
  impl_item -> impl;
  impl_item -> type_identifier;
  impl_item -> for;
  impl_item -> type_identifier;
  impl_item -> declaration_list;
  declaration_list -> open;
  declaration_list -> function_item;
  function_item -> fn;
  function_item -> identifier;
  function_item -> parameters;
  parameters -> open;
  parameters -> self_parameter;
  self_parameter -> ref;
  self_parameter -> self;
  parameters -> close;
  function_item -> block;
  block -> open;
  block -> expression_statement;
  expression_statement -> macro_invocation;
  macro_invocation -> identifier;
  macro_invocation -> excl;
  macro_invocation -> token_tree;
  token_tree -> open;
  token_tree -> string_literal;
  string_literal -> ";
  string_literal -> string_content;
  string_literal -> ";
  token_tree -> comma;
  token_tree -> self;
  token_tree -> .;
  token_tree -> identifier;
  token_tree -> close;
  expression_statement -> semicolon;
  block -> close;
  declaration_list -> close;
  source_file -> impl_item;
  impl_item -> impl;
  impl_item -> type_identifier;
  impl_item -> for;
  impl_item -> type_identifier;
  impl_item -> declaration_list;
  declaration_list -> open;
  declaration_list -> function_item;
  function_item -> fn;
  function_item -> identifier;
  function_item -> parameters;
  parameters -> open;
  parameters -> self_parameter;
  self_parameter -> ref;
  self_parameter -> self;
  parameters -> close;
  function_item -> block;
  block -> open;
  block -> expression_statement;
  expression_statement -> macro_invocation;
  macro_invocation -> identifier;
  macro_invocation -> excl;
  macro_invocation -> token_tree;
  token_tree -> open;
  token_tree -> string_literal;
  string_literal -> ";
  string_literal -> string_content;
  string_literal -> ";
  token_tree -> comma;
  token_tree -> self;
  token_tree -> .;
  token_tree -> identifier;
  token_tree -> close;
  expression_statement -> semicolon;
  block -> close;
  declaration_list -> close;
  source_file -> impl_item;
  impl_item -> impl;
  impl_item -> type_identifier;
  impl_item -> for;
  impl_item -> type_identifier;
  impl_item -> declaration_list;
  declaration_list -> open;
  declaration_list -> close;
  source_file -> function_item;
  function_item -> fn;
  function_item -> identifier;
  function_item -> type_parameters;
  type_parameters -> <;
  type_parameters -> type_parameter;
  type_parameter -> type_identifier;
  type_parameter -> trait_bounds;
  trait_bounds -> colon;
  trait_bounds -> type_identifier;
  type_parameters -> >;
  function_item -> parameters;
  parameters -> open;
  parameters -> parameter;
  parameter -> identifier;
  parameter -> colon;
  parameter -> reference_type;
  reference_type -> ref;
  reference_type -> type_identifier;
  parameters -> close;
  function_item -> block;
  block -> open;
  block -> expression_statement;
  expression_statement -> call_expression;
  call_expression -> field_expression;
  field_expression -> identifier;
  field_expression -> .;
  field_expression -> field_identifier;
  call_expression -> arguments;
  arguments -> open;
  arguments -> close;
  expression_statement -> semicolon;
  block -> expression_statement;
  expression_statement -> call_expression;
  call_expression -> field_expression;
  field_expression -> identifier;
  field_expression -> .;
  field_expression -> field_identifier;
  call_expression -> arguments;
  arguments -> open;
  arguments -> close;
  expression_statement -> semicolon;
  block -> expression_statement;
  expression_statement -> call_expression;
  call_expression -> field_expression;
  field_expression -> identifier;
  field_expression -> .;
  field_expression -> field_identifier;
  call_expression -> arguments;
  arguments -> open;
  arguments -> close;
  expression_statement -> semicolon;
  block -> close;
  source_file -> function_item;
  function_item -> fn;
  function_item -> identifier;
  function_item -> parameters;
  parameters -> open;
  parameters -> close;
  function_item -> block;
  block -> open;
  block -> let_declaration;
  let_declaration -> let;
  let_declaration -> identifier;
  let_declaration -> =;
  let_declaration -> struct_expression;
  struct_expression -> type_identifier;
  struct_expression -> field_initializer_list;
  field_initializer_list -> open;
  field_initializer_list -> field_initializer;
  field_initializer -> field_identifier;
  field_initializer -> colon;
  field_initializer -> call_expression;
  call_expression -> field_expression;
  field_expression -> string_literal;
  string_literal -> ";
  string_literal -> string_content;
  string_literal -> ";
  field_expression -> .;
  field_expression -> field_identifier;
  call_expression -> arguments;
  arguments -> open;
  arguments -> close;
  field_initializer_list -> close;
  let_declaration -> semicolon;
  block -> let_declaration;
  let_declaration -> let;
  let_declaration -> identifier;
  let_declaration -> =;
  let_declaration -> struct_expression;
  struct_expression -> type_identifier;
  struct_expression -> field_initializer_list;
  field_initializer_list -> open;
  field_initializer_list -> field_initializer;
  field_initializer -> field_identifier;
  field_initializer -> colon;
  field_initializer -> call_expression;
  call_expression -> field_expression;
  field_expression -> string_literal;
  string_literal -> ";
  string_literal -> string_content;
  string_literal -> ";
  field_expression -> .;
  field_expression -> field_identifier;
  call_expression -> arguments;
  arguments -> open;
  arguments -> close;
  field_initializer_list -> close;
  let_declaration -> semicolon;
  block -> let_declaration;
  let_declaration -> let;
  let_declaration -> identifier;
  let_declaration -> =;
  let_declaration -> struct_expression;
  struct_expression -> type_identifier;
  struct_expression -> field_initializer_list;
  field_initializer_list -> open;
  field_initializer_list -> field_initializer;
  field_initializer -> field_identifier;
  field_initializer -> colon;
  field_initializer -> call_expression;
  call_expression -> field_expression;
  field_expression -> string_literal;
  string_literal -> ";
  string_literal -> string_content;
  string_literal -> ";
  field_expression -> .;
  field_expression -> field_identifier;
  call_expression -> arguments;
  arguments -> open;
  arguments -> close;
  field_initializer_list -> close;
  let_declaration -> semicolon;
  block -> expression_statement;
  expression_statement -> call_expression;
  call_expression -> identifier;
  call_expression -> arguments;
  arguments -> open;
  arguments -> reference_expression;
  reference_expression -> ref;
  reference_expression -> identifier;
  arguments -> close;
  expression_statement -> semicolon;
  block -> expression_statement;
  expression_statement -> call_expression;
  call_expression -> identifier;
  call_expression -> arguments;
  arguments -> open;
  arguments -> reference_expression;
  reference_expression -> ref;
  reference_expression -> identifier;
  arguments -> close;
  expression_statement -> semicolon;
  block -> expression_statement;
  expression_statement -> call_expression;
  call_expression -> identifier;
  call_expression -> arguments;
  arguments -> open;
  arguments -> reference_expression;
  reference_expression -> ref;
  reference_expression -> identifier;
  arguments -> close;
  expression_statement -> semicolon;
  block -> expression_statement;
  expression_statement -> call_expression;
  call_expression -> field_expression;
  field_expression -> identifier;
  field_expression -> .;
  field_expression -> field_identifier;
  call_expression -> arguments;
  arguments -> open;
  arguments -> close;
  expression_statement -> semicolon;
  block -> close;
}
digraph G {
  Speak -> Dog;
  Speak -> Fish;
  Speak -> Shark;
  Move -> Dog;
  Move -> Fish;
  Move -> Shark;
  Hunt -> Shark;
}
